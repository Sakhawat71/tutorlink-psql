generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String   @id @default(uuid())
  email    String   @unique
  name     String
  password String
  role     UserRole

  isBlocked         Boolean @default(false)
  isActive          Boolean @default(true)
  isCompleteProfile Boolean @default(false)

  tutor   Tutor?
  student Student?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Tutor {
  id String @id @default(uuid())

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  bio         String
  experience  String
  hourlyRate  Float
  subjectList String[]
  location    Location
  isAvailable Boolean  @default(true)
  subjects    String[]

  availability Availability[]
  bookings     Booking[]
  reviews      Review[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("tutors")
}

model Student {
  id String @id @default(uuid())

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  gradeLevel  String?
  institution String?

  bookings Booking[]
  reviews  Review[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("students")
}

model Booking {
  id String @id @default(uuid())

  studentId String
  student   Student @relation(fields: [studentId], references: [id])

  tutorId String
  tutor   Tutor  @relation(fields: [tutorId], references: [id])

  date     DateTime
  duration Int
  price    Float

  status BookingStatus @default(PENDING)

  payment Payment?
  review  Review?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Payment {
  id String @id @default(uuid())

  bookingId String  @unique
  booking   Booking @relation(fields: [bookingId], references: [id])

  amount        Float
  paymentMethod String // "stripe", "sslcommerz", "paypal"
  transactionId String
  status        PaymentStatus @default(PENDING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  id String @id @default(uuid())

  bookingId String  @unique
  booking   Booking @relation(fields: [bookingId], references: [id])

  tutorId String
  tutor   Tutor  @relation(fields: [tutorId], references: [id])

  studentId String
  student   Student @relation(fields: [studentId], references: [id])

  rating    Int
  comment   String?
  createdAt DateTime @default(now())
}

enum UserRole {
  admin
  tutor
  student
}

enum Location {
  ONLINE
  ONSITE
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

model Availability {
  id        String  @id @default(uuid())
  day       Day // Strict enum days
  startTime String // "10:00" format
  endTime   String // "12:00" format
  
  Tutor     Tutor?  @relation(fields: [tutorId], references: [id])
  tutorId   String?
}

enum Day {
  Monday
  Tuesday
  Wednesday
  Thursday
  Friday
  Saturday
  Sunday
}

enum BookingStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
}
